// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add these new enums at the top
enum Role {
  ADMIN
  PARTICIPANT
}

enum ItemType {
  FILE
  FOLDER
}

// Modify the User model
model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  
    // Add these new profile fields
  bio           String?
  location      String?
  website       String?
  
  // Add role and memberships relation
  role          Role         @default(PARTICIPANT)
  memberships   Membership[]

  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// Add the new models below
model Room {
  id          String       @id @default(cuid())
  name        String
  inviteKey   String       @unique @default(cuid())
  files       File[]
  memberships Membership[]
  createdAt   DateTime     @default(now())
}

model Membership {
  id     String @id @default(cuid())
  role   Role   @default(PARTICIPANT)
  userId String
  roomId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model File {
  id        String    @id @default(cuid())
  name      String
  content   Bytes?    // <-- Changed from String? to Bytes?
  roomId    String
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  // Hierarchy Fields
  type      ItemType  @default(FILE)
  parentId  String?
  parent    File?     @relation("FileHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  File[]    @relation("FileHierarchy")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([roomId])
  @@index([parentId])
}

// Keep existing Account, Session, and VerificationToken models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}